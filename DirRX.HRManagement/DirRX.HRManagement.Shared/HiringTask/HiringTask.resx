<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HiringTaskSubject" xml:space="preserve">
    <value>Hire employee: {0}</value>
  </data>
  <data name="PreparingAssignmentSubject" xml:space="preserve">
    <value>Take necessary actions to hire employee: {0}</value>
  </data>
  <data name="HRRegistrationNoPersAgreementInstruction" xml:space="preserve">
    <value>1. Import all necessary information about the new employee to the system. After that, click "Create Documents" to create HR documents.
2. Print out and have the new employee sign the hard copies of the personal data processing agreement and the letter on joining electronic communication.
3. Complete the assignment.</value>
  </data>
  <data name="SignAllPaperDocAssignmentSubject" xml:space="preserve">
    <value>Have new employee sign hard copies of employment contract and employment order: {0}</value>
  </data>
  <data name="ManagerAssignmentInstruction" xml:space="preserve">
    <value>Meet the new employee and organize the onboarding. Complete the assignment.</value>
  </data>
  <data name="SignPaperEmploymentContractAssignmentInstruction" xml:space="preserve">
    <value>Print out the employment contract and have its hard copy signed by the HR Department manager and by the new employee. Complete the assignment.</value>
  </data>
  <data name="SignAllPaperDocAssignmentInstruction" xml:space="preserve">
    <value>1. Print out the employment contract and order, and then have their hard copies signed by the HR manager.
2. Make sure the new employee signs the hard copy of the employment contract and get the signed acknowledgement of the order.
3. Complete the assignment.</value>
  </data>
  <data name="ITResponsibleAssignmentInstruction" xml:space="preserve">
    <value>1. Create an account for the new employee.
2. Create a signature setting. If necessary, issue an electronic signature certificate, and then complete the assignment.</value>
  </data>
  <data name="SecurityResponsibleAssignmentInstruction" xml:space="preserve">
    <value>Prepare an ID card and give it to the new employee. Complete the assignment.</value>
  </data>
  <data name="SupplyResponsibleAssignmentInstruction" xml:space="preserve">
    <value>Set up a work space for the new employee and complete the assignment.</value>
  </data>
  <data name="SignPaperEmploymentContractAssignmentSubject" xml:space="preserve">
    <value>Have employee sign hard copy of employment contract: {0}</value>
  </data>
  <data name="SignSeoOrderAndEmploymentContractAssignmentInstruction" xml:space="preserve">
    <value>Read the employment contract and order:
1. If you have no comments, complete the assignment with the "Sign" result. Both documents will be automatically signed once you complete the assignment.
2. If you have any comments, write them down in the assignment text, and then complete the assignment with the "For Rework" result.</value>
  </data>
  <data name="SignEmploymentDocsSubject" xml:space="preserve">
    <value>Read local regulations, sign employment contract and order with electronic signature</value>
  </data>
  <data name="ReWorkDocsAssignmentInstruction" xml:space="preserve">
    <value>Revise the documents according to the comments and complete the assignment with the "Corrected" result.</value>
  </data>
  <data name="ReWorkDocsAssignmentSubject" xml:space="preserve">
    <value>Correct employment documents: {0}</value>
  </data>
  <data name="SignEmploymentContractAssignmentInstruction" xml:space="preserve">
    <value>1. Read local regulations, the employment contract and order.
2. Complete the assignment with the "Sign" result. The employment contract and order will be signed automatically once you complete the assignment.</value>
  </data>
  <data name="HRRegistrationInstruction" xml:space="preserve">
    <value>1. Import all necessary information about the new employee to the system. After that, click "Create Documents" to create HR documents.
2. Print out and have the new employee sign the hard copy of the letter on joining electronic communication.
3. Complete the assignment.</value>
  </data>
  <data name="AbortNotice" xml:space="preserve">
    <value>Employment aborted: {0}</value>
  </data>
  <data name="HiringTaskActiveText" xml:space="preserve">
    <value>Prepare documents for the new employee.</value>
  </data>
  <data name="SignSeoEmploymentDocsSubject" xml:space="preserve">
    <value>Sign employment contract and order with electronic signature: {0}</value>
  </data>
  <data name="ErrorTextReWorkNoActiveText" xml:space="preserve">
    <value>Leave your comments in the assignment text before you complete the assignment with the "For Rework" result.</value>
  </data>
</root>