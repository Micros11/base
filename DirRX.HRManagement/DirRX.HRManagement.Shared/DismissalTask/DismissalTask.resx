<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApprovalAssignmentInstruction" xml:space="preserve">
    <value>Review the parameters of the resignation letter:
1. If the date specified in the "Resignation date" field is invalid, correct it and complete the assignment with the "Approve" result.
2. If the date in the "Resignation date" field is correct, complete the assignment with the "Approve" result.
3. If the resignation letter should be denied, specify the reason in the assignment text and complete the assignment with the "Deny" result.</value>
  </data>
  <data name="ApprovalAssignmentSubject" xml:space="preserve">
    <value>Approve resignation parameters: {0}</value>
  </data>
  <data name="DismissalDocsReWorkAssignmentSubject" xml:space="preserve">
    <value>Rework resignation order: {0}</value>
  </data>
  <data name="DismissalDocsReWorkAssignmentInstruction" xml:space="preserve">
    <value>Correct the resignation order in accordance with the specified remarks and complete the assignment with the "Corrected" result. </value>
  </data>
  <data name="PrepareDocAssignmentInstruction" xml:space="preserve">
    <value>Click the "Create Order" button to create the order. Check the order parameters and correct them, if necessary, then complete the assignment.</value>
  </data>
  <data name="PrepareDocAssignmentSubject" xml:space="preserve">
    <value>Create and check resignation order: {0}</value>
  </data>
  <data name="SignSeoAssignmentInstruction" xml:space="preserve">
    <value>Review the order:
1. If the order is correct, complete the assignment with the "Sign" result (the order will be signed automatically upon completion).
2. If you have any remarks, specify them in the assignment text and complete the assignment with the "For Rework" result.</value>
  </data>
  <data name="SignAssignmentSubject" xml:space="preserve">
    <value>Sign resignation order of {0} with your electronic signature</value>
  </data>
  <data name="DismissEmployeeAssignmentInstruction" xml:space="preserve">
    <value>1. Make necessary changes in HR documents related to the resignation.
2. Have the employee read the personal card with signed acknowledgement.
3. Give the necessary documents to the employee.
4. Complete the assignment.</value>
  </data>
  <data name="DismissEmployeeAssignmentSubject" xml:space="preserve">
    <value>Take necessary actions on resignation: {0}</value>
  </data>
  <data name="ReApproveAssignmentSubject" xml:space="preserve">
    <value>Correct parameters of resignation letter: {0}</value>
  </data>
  <data name="AccounterDismissEmployeeAssignmentInstruction" xml:space="preserve">
    <value>Do the necessary financial operations related to the resignation of the employee and complete the assignment.</value>
  </data>
  <data name="EmployeeGoRoundAssignmentSubject" xml:space="preserve">
    <value>Return the business property to the responsible departments</value>
  </data>
  <data name="RespGoRoundControlAssignmentSubject" xml:space="preserve">
    <value>Collect business property from resigning employee: {0}</value>
  </data>
  <data name="RespGoRoundAssignmentSubject" xml:space="preserve">
    <value>Check if there is any business property to collect from resigning employee: {0}</value>
  </data>
  <data name="RespGoRoundControlAssignmentInstruction" xml:space="preserve">
    <value>1. Collect the business property from the employee.
2. Take actions on the employee resignation, if necessary, and complete the assignment.</value>
  </data>
  <data name="EmployeeGoRoundAssignmentIntruction" xml:space="preserve">
    <value>Return the business property to the employees of the responsible departments:
{0}</value>
  </data>
  <data name="AbortNotice" xml:space="preserve">
    <value>Resignation procedure aborted: {0}</value>
  </data>
  <data name="DismissalTaskSubject" xml:space="preserve">
    <value>Process employee resignation: {0}</value>
  </data>
  <data name="ErrorTextReWorkNoActiveText" xml:space="preserve">
    <value>Enter your remarks in the assignment text before you complete it with the "For Rework" result.</value>
  </data>
  <data name="ErrorTextGoRoundNoActiveText" xml:space="preserve">
    <value>Specify the business property to be returned by the employee in the assignment text before you complete the assignment with the "To Return" result.</value>
  </data>
  <data name="DeniedNoticeSubject" xml:space="preserve">
    <value>Employee resignation denied: {0}</value>
  </data>
  <data name="SignStatementAssignmentInstruction" xml:space="preserve">
    <value>Review the resignation letter:
1. If the letter is correct, complete the assignment with the "Sign" result (the letter will be signed automatically upon completion).
2. If you have any remarks, specify them in the assignment text and complete the assignment with the "For Reapproval" result.</value>
  </data>
  <data name="SignStatementAssignmentSubject" xml:space="preserve">
    <value>Review and sign resignation letter with electronic signature</value>
  </data>
  <data name="ApprovalSEOAssignmentInstruction" xml:space="preserve">
    <value>Review the parameters of the resignation letter:
1. If the parameters are correct, complete the task with the "Approve" result.
2. If you have any remarks or the resignation letter should be denied, complete the assignment with the "Deny" result.</value>
  </data>
  <data name="SignEmployeeAssignmenInstruction" xml:space="preserve">
    <value>Read the order and complete the assignment with the "Sign" result (the order will be signed automatically upon completion).</value>
  </data>
  <data name="DismissEmployeeAndPrintDocAssignmentInstruction" xml:space="preserve">
    <value>1. Print out the order and have its hard copy signed by HR manager.
2. Make necessary changes in HR documents related to the resignation.
3. Print out the resignation letter and have it signed. Have the resigning employee sign the hard copy of the resignation letter, and read the personal card and the resignation order with signed acknowledgement.
4. Give the necessary documents to the employee.
5. Complete the assignment.</value>
  </data>
  <data name="ErrorTextRefuseNoActiveText" xml:space="preserve">
    <value>Specify the reason for denial in the assignment text before you complete the assignment with the "Deny" result.</value>
  </data>
  <data name="RespGoRoundAssignmentInstruction" xml:space="preserve">
    <value>Check if the resigning employee has any business property to return:
1. If the employee does not have any business property to return, then take actions on resignation, if necessary, and complete the assignment with the "Done" result.
2. If the employee has property to return, specify the property in the assignment text and complete the assignment with the "To Return" result.</value>
  </data>
  <data name="ReApproveAssignmentInstruction" xml:space="preserve">
    <value>Read the remarks:
1. Change the parameters of the resignation letter, if necessary, and complete the assignment with the "Approve" result.
2. If the resignation letter should be denied, specify the reason in the assignment text and complete the assignment with the "Deny" result.</value>
  </data>
  <data name="ErrorTextReApproveNoActiveText" xml:space="preserve">
    <value>Enter your remarks in the assignment text before you complete it with the "For Reapproval" result.</value>
  </data>
  <data name="ActiveTextOnCreate" xml:space="preserve">
    <value>Please approve the resignation of the employee.</value>
  </data>
  <data name="SignEmployeeAssignmentSubject" xml:space="preserve">
    <value>Sign resignation order with your electronic signature</value>
  </data>
  <data name="ServiceAHOName" xml:space="preserve">
    <value>Facilities Department</value>
  </data>
  <data name="ServiceITName" xml:space="preserve">
    <value>IT Department</value>
  </data>
  <data name="ServiceSBName" xml:space="preserve">
    <value>Security Department</value>
  </data>
</root>