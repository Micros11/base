using System;
using System.Collections.Generic;
using System.Linq;
using Sungero.Core;
using Sungero.CoreEntities;
using DirRX.HRLite.ConsentAssignment;

namespace DirRX.HRLite
{
  partial class ConsentAssignmentServerHandlers
  {

    public override void Created(Sungero.Domain.CreatedEventArgs e)
    {
      _obj.SignatureType = SignatureType.Approval.ToString();
    }

    public override void BeforeComplete(Sungero.Workflow.Server.BeforeCompleteEventArgs e)
    {
      // Обновить свзяки документов с сотрудником.
      var document = _obj.AgreementGroup.StatementDocuments.FirstOrDefault();
      var documents = new List<Sungero.Docflow.IInternalDocumentBase>() {Sungero.Docflow.InternalDocumentBases.As(document)};

      // При выполнении задания с результатом "Подписать" проверить, что на документах есть согласующая подпись исполнителя задания.
      if (_obj.Result.Value == ConsentAssignment.Result.Sign)
      {
        var hasApprovalSignatures = Signatures.Get(document.LastVersion).Any(x => x.SignatureType == SignatureType.Approval && x.SignatoryFullName == _obj.Performer.Name);
          if (!hasApprovalSignatures && !Functions.Module.IsUserInTestRole())
            e.AddError(ConsentAssignments.Resources.NeedApprovalSignatureFormat(document.Name));
        
        // Обновить свзяки документов с сотрудником.
        Functions.Module.CreateOrUpdateEmployeeDocumentLink(Sungero.Company.Employees.As(_obj.Performer), documents, DirRX.HRLite.EmployeeDocumentLink.Status.Signed);
      }
      
      // При выполнении задания с результатом "Отказать" проверить, что в тексте задания указана причина отказа.
      if (_obj.Result.Value == ConsentAssignment.Result.Refuse)
      {
        if (_obj.Texts.Last().IsAutoGenerated.Value)
          e.AddError(ConsentAssignments.Resources.ErrorTextRefuseNoActiveText);
        
        // Обновить свзяки документов с сотрудником.
        Functions.Module.CreateOrUpdateEmployeeDocumentLink(Sungero.Company.Employees.As(_obj.Performer), documents, DirRX.HRLite.EmployeeDocumentLink.Status.Closed);
      }
    }
  }

}